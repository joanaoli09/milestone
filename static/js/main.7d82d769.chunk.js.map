{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","firstName","lastName","userName","email","password","change","e","setState","target","name","value","onSubmit","preventDefault","props","className","placeholder","this","onChange","username","type","onClick","React","Component","App","fields","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qSAGqBA,G,kNACnBC,MAAQ,CACNC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,I,EAGZC,OAAS,SAAAC,GACP,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAG9BC,SAAW,SAAAL,GACTA,EAAEM,iBACF,EAAKC,MAAMF,SAAS,EAAKZ,OACzB,EAAKQ,SAAS,CACZP,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,M,uDAGJ,IAAD,OACP,OACE,yBAAKU,UAAU,iBACb,0BAAMA,UAAU,QACd,uBAAGA,UAAU,YAAb,kBACA,2BACEA,UAAU,QACVL,KAAK,YACLM,YAAY,aACZL,MAAOM,KAAKjB,MAAMC,UAClBiB,SAAU,SAAAX,GAAC,OAAI,EAAKD,OAAOC,MAE7B,6BACA,2BACEQ,UAAU,QACVL,KAAK,WACLM,YAAY,YACZL,MAAOM,KAAKjB,MAAME,SAClBgB,SAAU,SAAAX,GAAC,OAAI,EAAKD,OAAOC,MAE7B,6BACA,2BACEQ,UAAU,QACVL,KAAK,WACLM,YAAY,WACZL,MAAOM,KAAKjB,MAAMmB,SAClBD,SAAU,SAAAX,GAAC,OAAI,EAAKD,OAAOC,MAE7B,6BACA,2BACEQ,UAAU,QACVL,KAAK,QACLM,YAAY,QACZL,MAAOM,KAAKjB,MAAMI,MAClBc,SAAU,SAAAX,GAAC,OAAI,EAAKD,OAAOC,MAE7B,6BACA,2BACEQ,UAAU,QACVL,KAAK,WACLU,KAAK,WACLJ,YAAY,WACZL,MAAOM,KAAKjB,MAAMK,SAClBa,SAAU,SAAAX,GAAC,OAAI,EAAKD,OAAOC,MAE7B,6BACA,4BAAQQ,UAAU,SAASM,QAAS,SAAAd,GAAC,OAAI,EAAKK,SAASL,KAAvD,gB,GAvEwBe,IAAMC,YCezBC,E,4MAbbZ,SAAW,SAAAa,GACTC,QAAQC,IAAI,gBAAiBF,I,uDAGrB,IAAD,OACP,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,CAAMH,SAAU,SAAAa,GAAM,OAAI,EAAKb,SAASa,W,GAR9BF,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.7d82d769.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Form.css\";\n\nexport default class Form extends React.Component {\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    userName: \"\",\n    email: \"\",\n    password: \"\"\n  };\n\n  change = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.setState({\n      firstName: \"\",\n      lastName: \"\",\n      userName: \"\",\n      email: \"\",\n      password: \"\"\n    });\n  };\n  render() {\n    return (\n      <div className=\"formcontainer\">\n        <form className=\"Form\">\n          <p className=\"register\">CREATE ACCOUNT</p>\n          <input\n            className=\"input\"\n            name=\"firstName\"\n            placeholder=\"First name\"\n            value={this.state.firstName}\n            onChange={e => this.change(e)}\n          />\n          <br />\n          <input\n            className=\"input\"\n            name=\"lastName\"\n            placeholder=\"Last name\"\n            value={this.state.lastName}\n            onChange={e => this.change(e)}\n          />\n          <br />\n          <input\n            className=\"input\"\n            name=\"username\"\n            placeholder=\"Username\"\n            value={this.state.username}\n            onChange={e => this.change(e)}\n          />\n          <br />\n          <input\n            className=\"input\"\n            name=\"email\"\n            placeholder=\"Email\"\n            value={this.state.email}\n            onChange={e => this.change(e)}\n          />\n          <br />\n          <input\n            className=\"input\"\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            value={this.state.password}\n            onChange={e => this.change(e)}\n          />\n          <br />\n          <button className=\"submit\" onClick={e => this.onSubmit(e)}>\n            Submit\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form.js\";\n\nclass App extends Component {\n  onSubmit = fields => {\n    console.log(\"App comp got:\", fields);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form onSubmit={fields => this.onSubmit(fields)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}