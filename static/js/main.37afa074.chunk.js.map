{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["App","React","useState","firstName","lastName","username","email","password","state","setState","handleSubmit","useCallback","e","alert","preventDefault","handleChange","target","prevState","name","value","className","placeholder","onChange","type","onClick","onSubmit","fields","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qTAmFeA,G,MAhFH,WAAO,IAAD,EACUC,IAAMC,SAAS,CACvCC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,KANI,mBACTC,EADS,KACFC,EADE,KASVC,EAAeT,IAAMU,aAAY,SAAAC,GACrCC,MAAM,uCAEND,EAAEE,iBAEFL,EAAS,CACPN,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,OAEX,IAEGQ,EAAed,IAAMU,aAAY,YAAiB,IAAdK,EAAa,EAAbA,OACxCP,GAAS,SAAAQ,GAAS,kCAAUA,GAAV,kBAAsBD,EAAOE,KAAOF,EAAOG,aAC5D,IAEH,OACE,yBAAKC,UAAU,iBACb,0BAAMA,UAAU,QACd,uBAAGA,UAAU,YAAb,kBAEA,2BACEA,UAAU,QACVF,KAAK,YACLG,YAAY,aACZF,MAAOX,EAAML,UACbmB,SAAUP,IAGZ,2BACEK,UAAU,QACVF,KAAK,WACLG,YAAY,YACZF,MAAOX,EAAMJ,SACbkB,SAAUP,IAGZ,2BACEK,UAAU,QACVF,KAAK,WACLG,YAAY,WACZF,MAAOX,EAAMH,SACbiB,SAAUP,IAGZ,2BACEK,UAAU,QACVF,KAAK,QACLG,YAAY,QACZF,MAAOX,EAAMF,MACbgB,SAAUP,IAGZ,2BACEK,UAAU,QACVF,KAAK,WACLK,KAAK,WACLF,YAAY,WACZF,MAAOX,EAAMD,SACbe,SAAUP,IAGZ,4BAAQK,UAAU,SAASI,QAASd,GAApC,cC1DOV,E,4MAbbyB,SAAW,SAAAC,GACTC,QAAQC,IAAI,gBAAiBF,I,uDAGrB,IAAD,OACP,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,CAAMK,SAAU,SAAAC,GAAM,OAAI,EAAKD,SAASC,W,GAR9BG,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.37afa074.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Form.css\";\n\nconst App = () => {\n  const [state, setState] = React.useState({\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    email: \"\",\n    password: \"\"\n  });\n\n  const handleSubmit = React.useCallback(e => {\n    alert(\"Your information has been uploaded.\");\n\n    e.preventDefault();\n\n    setState({\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\"\n    });\n  }, []);\n\n  const handleChange = React.useCallback(({ target }) => {\n    setState(prevState => ({ ...prevState, [target.name]: target.value }));\n  }, []);\n\n  return (\n    <div className=\"formcontainer\">\n      <form className=\"Form\">\n        <p className=\"register\">CREATE ACCOUNT</p>\n\n        <input\n          className=\"input\"\n          name=\"firstName\"\n          placeholder=\"First name\"\n          value={state.firstName}\n          onChange={handleChange}\n        />\n\n        <input\n          className=\"input\"\n          name=\"lastName\"\n          placeholder=\"Last name\"\n          value={state.lastName}\n          onChange={handleChange}\n        />\n\n        <input\n          className=\"input\"\n          name=\"username\"\n          placeholder=\"Username\"\n          value={state.username}\n          onChange={handleChange}\n        />\n\n        <input\n          className=\"input\"\n          name=\"email\"\n          placeholder=\"Email\"\n          value={state.email}\n          onChange={handleChange}\n        />\n\n        <input\n          className=\"input\"\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          value={state.password}\n          onChange={handleChange}\n        />\n\n        <button className=\"submit\" onClick={handleSubmit}>\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\nexport default App;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form.js\";\n\nclass App extends Component {\n  onSubmit = fields => {\n    console.log(\"App comp got:\", fields);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form onSubmit={fields => this.onSubmit(fields)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}